server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.value}}

spring:
  application:
    name: apigateway-service
  # RebbitMq 설정 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        # 로그인
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie #Post로 요청되는 값을 항상 새로운 값으로 인식하기 위해 RequestHeader 초기화 설정
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # /***-service를 삭제 후 다시 요청
        # 회원가입
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie #Post로 요청되는 값을 항상 새로운 값으로 인식하기 위해 RequestHeader 초기화 설정
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # /***-service를 삭제 후 다시 요청
        # 인증이 필요한 호출
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie #Post로 요청되는 값을 항상 새로운 값으로 인식하기 위해 RequestHeader 초기화 설정
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # /***-service를 삭제 후 다시 요청
            - AuthorizationHeaderFilter
        # Acturator 기능 호출
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie #Post로 요청되는 값을 항상 새로운 값으로 인식하기 위해 RequestHeader 초기화 설정
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # /***-service를 삭제 후 다시 요청

        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**

        - id: first-service
          uri: lb://MY-FIRST-SERVICE
          predicates:
            - Path=/first-service/**
          filters:
            - CustomFilter
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi. there.
                preLogger: true
                postLogger: true
#token:
#  secret: user_token

# Acturator 기능처리를 위한 설정
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh # refresh: Config 정보를 refresh